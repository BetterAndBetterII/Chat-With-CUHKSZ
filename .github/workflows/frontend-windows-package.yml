name: Windows Qt Package

on:
  workflow_dispatch:

env:
  BUILD_TYPE: Release
  BUILD_TAG: ${{ github.event.head_commit.timestamp }}
  PACKAGE_NAME: ChatWithCUSZ_Desktop_Windows_${{ github.event.head_commit.timestamp }}
  VCPKG_ROOT: ${{github.workspace}}/vcpkg
  VCPKG_DEFAULT_TRIPLET: x64-windows

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
          
    # 缓存 Chocolatey 的缓存目录
    - name: Cache Chocolatey Cache
      uses: actions/cache@v4
      with:
        path: C:\ProgramData\chocolatey\cache
        key: chocolatey-cache-${{ runner.os }}-${{ hashFiles('**/choco-*.lock') }}
        restore-keys: |
          chocolatey-cache-${{ runner.os }}-

    # 缓存 CMake
    - name: Cache CMake
      uses: actions/cache@v4
      with:
        path: C:\tools\cmake
        key: cmake-cache-${{ runner.os }}-v1
        restore-keys: |
          cmake-cache-${{ runner.os }}-

    # 缓存 Ninja
    - name: Cache Ninja
      uses: actions/cache@v4
      with:
        path: C:\tools\ninja
        key: ninja-cache-${{ runner.os }}-v1
        restore-keys: |
          ninja-cache-${{ runner.os }}-

    # 缓存 Additional Tools
    - name: Cache Additional Tools
      uses: actions/cache@v4
      with:
        path: |
          C:\Program Files\Git
          C:\Python311
          C:\Program Files (x86)\Windows Kits\10
        key: tools-cache-${{ runner.os }}-v1
        restore-keys: |
          tools-cache-${{ runner.os }}-

    # 安装必要的编译工具和系统依赖
    - name: Install Build Tools
      uses: microsoft/setup-msbuild@v1.1
      with:
        msbuild-architecture: x64

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        architecture: 'x64'

    # 安装 CMake
    - name: Install CMake
      run: |
        if (-Not (Test-Path "C:\tools\cmake")) {
          choco install cmake --installargs 'INSTALLDIR=C:\tools\cmake' -y
        }

    # 安装 Ninja
    - name: Install Ninja
      run: |
        if (-Not (Test-Path "C:\tools\ninja")) {
          choco install ninja --version=1.10.2 -y --installargs 'INSTALLDIR=C:\tools\ninja' --no-progress
        }

    # 安装 Additional Tools
    - name: Install Additional Tools
      run: |
        choco install -y git --installargs 'INSTALLDIR=C:\Program Files\Git' --no-progress
        choco install -y python --version=3.11.0 --installargs 'INSTALLDIR=C:\Python311' --no-progress
        choco install -y windows-sdk-10-version-2004-all --no-progress

    # 安装和缓存 vcpkg
    - name: Cache vcpkg
      id: cache-vcpkg
      uses: actions/cache@v4
      with:
        path: |
          ${{env.VCPKG_ROOT}}
          !${{env.VCPKG_ROOT}}/.git
          !${{env.VCPKG_ROOT}}/buildtrees
          !${{env.VCPKG_ROOT}}/packages
          !${{env.VCPKG_ROOT}}/downloads
        key: vcpkg-windows-${{hashFiles('frontend/vcpkg.json')}}

    - name: Install vcpkg
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/Microsoft/vcpkg.git ${{env.VCPKG_ROOT}}
        ${{env.VCPKG_ROOT}}/bootstrap-vcpkg.bat
        ${{env.VCPKG_ROOT}}/vcpkg integrate install

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        tools: 'tools_cmake'
        cache: true

    - name: Configure CMake with vcpkg
      run: |
        cmake -B ${{github.workspace}}/build `
              -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} `
              -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake `
              -DVCPKG_TARGET_TRIPLET=${{env.VCPKG_DEFAULT_TRIPLET}} `
              -DBUILD_BACKEND=OFF `
              -DBUILD_FRONTEND=ON

    - name: Build
      run: |
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target frontend

    - name: Deploy Qt
      run: |
        cd ${{github.workspace}}/build/frontend/${{env.BUILD_TYPE}}
        windeployqt.exe frontend.exe

    - name: Create Package
      run: |
        mkdir ${{github.workspace}}/package
        cp -r ${{github.workspace}}/build/frontend/${{env.BUILD_TYPE}}/* ${{github.workspace}}/package/

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: ${{github.workspace}}/package

      # 上传构建产物到 GitHub Release
    - name: Create GitHub Release
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ env.TAG_DATE }}
        name: Release ${{ env.TAG_DATE }}
        body: "自动生成的发布，发布日期：${{ env.TAG_DATE }}"
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.PACKAGE_NAME }}.AppImage
        path: ${{ github.workspace }}/package/*.AppImage
