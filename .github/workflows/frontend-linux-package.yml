name: Linux Qt Package

on:
  workflow_dispatch:

env:
  BUILD_TYPE: Release
  BUILD_TAG: ${{ github.event.head_commit.timestamp }}
  PACKAGE_NAME: ChatWithCUSZ_Desktop_Linux_${{ github.event.head_commit.timestamp }}
  VCPKG_ROOT: ${{github.workspace}}/vcpkg
  VCPKG_DEFAULT_TRIPLET: x64-linux
  CC: gcc
  CXX: g++

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    # 安装必要的编译工具和 Qt5 依赖
    - name: Install Build Tools and Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          gcc \
          g++ \
          ninja-build \
          cmake \
          pkg-config \
          python3-pip \
          python3 \
          bison \
          libgl1-mesa-dev \
          libxkbcommon-x11-0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-shape0 \
          libxcb-xinerama0 \
          libsystemd-dev \
          pkg-config \
          ninja-build \
          libmount-dev \
          libblkid-dev \
          libcrypt-dev \
          libsystemd-dev \
          libssl-dev \
          libpcre2-dev \
          libxi-dev \
          libxtst-dev \
          meson \
          python3-jinja2 \
          libfuse2

    # 安装 meson（libsystemd 需要）
    - name: Install Meson
      run: |
        pip3 install meson

    # 安装和缓存 vcpkg
    - name: Cache vcpkg
      id: cache-vcpkg
      uses: actions/cache@v4
      with:
        path: |
          ${{env.VCPKG_ROOT}}
          !${{env.VCPKG_ROOT}}/.git
          !${{env.VCPKG_ROOT}}/buildtrees
          !${{env.VCPKG_ROOT}}/packages
          !${{env.VCPKG_ROOT}}/downloads
        key: vcpkg-${{runner.os}}-${{hashFiles('vcpkg.json')}}

    - name: Install vcpkg
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/Microsoft/vcpkg.git ${{env.VCPKG_ROOT}}
        ${{env.VCPKG_ROOT}}/bootstrap-vcpkg.sh
        ${{env.VCPKG_ROOT}}/vcpkg integrate install

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        host: 'linux'
        target: 'desktop'
        arch: 'gcc_64'
        tools: 'tools_cmake'
        cache: true

    - name: Install Frontend Dependencies
      run: |
        ${{env.VCPKG_ROOT}}/vcpkg install --triplet ${{env.VCPKG_DEFAULT_TRIPLET}} --x-manifest-root=${{github.workspace}}/frontend

    - name: Configure CMake with vcpkg
      run: |
        cmake -B ${{github.workspace}}/build \
              -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
              -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake \
              -DVCPKG_TARGET_TRIPLET=${{env.VCPKG_DEFAULT_TRIPLET}} \
              -DCMAKE_C_COMPILER=gcc \
              -DCMAKE_CXX_COMPILER=g++ \
              -DBUILD_BACKEND=OFF \
              -DBUILD_FRONTEND=ON \
              -GNinja

    - name: Build
      run: |
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target frontend

    - name: Install linuxdeployqt
      run: |
        wget https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
        chmod +x linuxdeployqt-continuous-x86_64.AppImage
        sudo mv linuxdeployqt-continuous-x86_64.AppImage /usr/local/bin/linuxdeployqt

    - name: Deploy Qt
      run: |
        cd ${{github.workspace}}/build/frontend
        linuxdeployqt frontend -appimage

    - name: Create Package
      run: |
        mkdir -p ${{github.workspace}}/package
        cp -r ${{github.workspace}}/build/frontend/* ${{github.workspace}}/package/

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: ${{github.workspace}}/package

    - name: Generate Date Tag
      id: generate_tag
      run: |
        TAG_DATE=$(date +'%Y%m%d')
        echo "TAG_DATE=${TAG_DATE}" >> $GITHUB_ENV
        echo "PACKAGE_NAME=ChatWithCUSZ_Desktop_Linux_${TAG_DATE}" >> $GITHUB_ENV

    # 上传构建产物到 GitHub Release
    - name: Create GitHub Release
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ env.TAG_DATE }}
        name: Release ${{ env.TAG_DATE }}
        body: "自动生成的发布，发布日期：${{ env.TAG_DATE }}"
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.PACKAGE_NAME }}.AppImage
        path: ${{ github.workspace }}/package/*.AppImage
