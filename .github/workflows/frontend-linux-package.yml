name: Linux Qt Package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release
  BUILD_TAG: ${{ github.event.head_commit.timestamp }}
  PACKAGE_NAME: ChatWithCUSZ_Desktop_Linux_${{ github.event.head_commit.timestamp }}
  VCPKG_ROOT: ${{github.workspace}}/vcpkg
  VCPKG_DEFAULT_TRIPLET: x64-linux

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    # 安装和缓存 vcpkg
    - name: Cache vcpkg
      uses: actions/cache@v3
      with:
        path: |
          ${{env.VCPKG_ROOT}}
          !${{env.VCPKG_ROOT}}/.git
          !${{env.VCPKG_ROOT}}/buildtrees
          !${{env.VCPKG_ROOT}}/packages
          !${{env.VCPKG_ROOT}}/downloads
        key: vcpkg-${{runner.os}}-${{hashFiles('vcpkg.json')}}

    - name: Install vcpkg
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/Microsoft/vcpkg.git ${{env.VCPKG_ROOT}}
        ${{env.VCPKG_ROOT}}/bootstrap-vcpkg.sh
        ${{env.VCPKG_ROOT}}/vcpkg integrate install

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.2'
        host: 'linux'
        target: 'desktop'
        arch: 'gcc_64'
        tools: 'tools_cmake'
        cache: true

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libgl1-mesa-dev ninja-build

    - name: Configure CMake with vcpkg
      run: |
        cmake -B ${{github.workspace}}/build \
              -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
              -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake \
              -DVCPKG_TARGET_TRIPLET=${{env.VCPKG_DEFAULT_TRIPLET}} \
              -GNinja

    - name: Build
      run: |
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target frontend

    - name: Deploy Qt
      run: |
        cd ${{github.workspace}}/build/frontend
        linuxdeployqt frontend -appimage

    - name: Create Package
      run: |
        mkdir -p ${{github.workspace}}/package
        cp -r ${{github.workspace}}/build/frontend/* ${{github.workspace}}/package/

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: ${{github.workspace}}/package
